'use client';

import { useState } from 'react';
import axios from 'axios';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend, CartesianGrid } from 'recharts';

interface AnalysisResult {
  lintMessages: any[];
  complexity: {
    operands: number;
    operators: number;
    difficulty: number;
    volume: number;
    effort: number;
    cyclomatic: number;
  } | null;
  error?: string;
}

export default function CodeAnalyzer() {
  const [code, setCode] = useState('');
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const analyzeCode = async () => {
    if (!code.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
      return;
    }
    setIsLoading(true);
    setResult(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    try {
      // –í–ê–ñ–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π URL –Ω–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000
      const { data } = await axios.post('http://localhost:3000/analyze', { code });
      setResult(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <main className="flex min-h-screen flex-col items-center justify-start p-12 bg-gray-900 text-white">
      <div className="w-full max-w-4xl">
        <h1 className="text-4xl font-bold mb-6 text-center">CodeRefinery üíé</h1>

        <textarea
          value={code}
          onChange={(e) => setCode(e.target.value)}
          placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à JavaScript –∫–æ–¥ —Ç—É—Ç..."
          className="w-full h-64 p-4 font-mono text-sm bg-gray-800 border border-gray-600 rounded-lg focus:ring-blue-500 focus:border-blue-500"
        />

        <div className="mt-4 text-center">
          <button
            onClick={analyzeCode}
            disabled={isLoading}
            className="px-6 py-2 bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-gray-500 disabled:cursor-not-allowed"
          >
            {isLoading ? '–ê–Ω–∞–ª—ñ–∑—É—î–º–æ...' : '–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏'}
          </button>

          <button
            onClick={() => {
              setCode('');      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
              setResult(null); // –£–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            }}
            className="ml-4 px-6 py-2 bg-red-600 rounded-lg hover:bg-red-700" // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –∏ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
          >
            –û—á–∏—Å—Ç–∏—Ç–∏
          </button>
        </div>

        {result && (
          <div className="mt-8 p-4 bg-gray-800 rounded-lg">
            <h2 className="text-2xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É</h2>

            {result.complexity && (
              <div>
                <h3 className="text-xl mb-2">–ú–µ—Ç—Ä–∏–∫–∏ –•–æ–ª—Å—Ç–µ–¥–∞ —Ç–∞ –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={Object.entries(result.complexity).map(([name, value]) => ({ name, value }))}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#4a5568" />
                    <XAxis dataKey="name" stroke="#a0aec0" />
                    <YAxis stroke="#a0aec0" />
                    <Tooltip contentStyle={{ backgroundColor: '#2d3748', border: 'none' }} />
                    <Legend />
                    <Bar dataKey="value" fill="#4299e1" name="–ó–Ω–∞—á–µ–Ω–Ω—è" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            )}

            <div className="mt-6">
              <h3 className="text-xl mb-2">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ESLint ({result.lintMessages.length})</h3>
              {result.lintMessages.length > 0 ? (
                <pre className="p-4 bg-gray-900 rounded-md overflow-x-auto text-sm">
                  {JSON.stringify(result.lintMessages, null, 2)}
                </pre>
              ) : (
                <p className="text-green-400">–ó–∞—É–≤–∞–∂–µ–Ω—å –≤—ñ–¥ ESLint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—ñ–¥–º—ñ–Ω–Ω–∏–π –∫–æ–¥!</p>
              )}
            </div>

            {result.error && (
              <div className="mt-6 p-4 bg-red-900 border border-red-500 rounded-md">
                <h3 className="text-xl text-red-400">–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ</h3>
                <p>{result.error}</p>
              </div>
            )}
          </div>
        )}
      </div>
    </main>
  );
}